plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.kakaopaysec'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.data:spring-data-rest-webmvc:3.6.1'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation group: 'org.springframework.data', name: 'spring-data-commons'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    
    // mapstruct
    implementation('org.mapstruct:mapstruct:1.4.2.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.4.2.Final')
    testAnnotationProcessor('org.mapstruct:mapstruct-processor:1.4.2.Final')

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
	// sipios
	implementation("com.sipios:spring-search:0.2.3")
	
	// junit
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.0'
	
	// mybatis
	implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2")

}

configure("querydslProjects") {
    apply plugin: "io.spring.dependency-management"

    dependencies {
        implementation 'com.querydsl:querydsl-jpa'
        implementation 'com.querydsl:querydsl-core'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    }

    def generated = 'src/main/generated'
    sourceSets {
        main.java.srcDirs += [ generated ]
    }

    tasks.withType(JavaCompile) {
        options.annotationProcessorGeneratedSourcesDirectory = file(generated)
    }

    clean.doLast {
        file(generated).deleteDir()
    }
}

tasks.named('test') {
	useJUnitPlatform()
}
